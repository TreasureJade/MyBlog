<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.by.blog.dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.by.blog.entity.Article">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="digest" jdbcType="VARCHAR" property="digest" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="reading" jdbcType="BIGINT" property="reading" />
    <result column="comments" jdbcType="BIGINT" property="comments" />
    <result column="likes" jdbcType="BIGINT" property="likes" />
    <result column="tags_id" jdbcType="INTEGER" property="tagsId" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="creat_time" jdbcType="VARCHAR" property="creatTime" />
    <result column="update_time" jdbcType="VARCHAR" property="updateTime" />
    <result column="article" jdbcType="LONGVARCHAR" property="article" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from article
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.by.blog.entity.Article">
    insert into article (id, digest, author, 
      title, reading, comments, 
      likes, tags_id, type_id, 
      creat_time, update_time, article
      )
    values (#{id,jdbcType=BIGINT}, #{digest,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{title,jdbcType=VARCHAR}, #{reading,jdbcType=BIGINT}, #{comments,jdbcType=BIGINT}, 
      #{likes,jdbcType=BIGINT}, #{tagsId,jdbcType=INTEGER}, #{typeId,jdbcType=INTEGER}, 
      #{creatTime,jdbcType=VARCHAR}, #{updateTime,jdbcType=VARCHAR}, #{article,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.by.blog.entity.Article">
    update article
    set digest = #{digest,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      reading = #{reading,jdbcType=BIGINT},
      comments = #{comments,jdbcType=BIGINT},
      likes = #{likes,jdbcType=BIGINT},
      tags_id = #{tagsId,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=INTEGER},
      creat_time = #{creatTime,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=VARCHAR},
      article = #{article,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, digest, author, title, reading, comments, likes, tags_id, type_id, creat_time, 
    update_time, article
    from article
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, digest, author, title, reading, comments, likes, tags_id, type_id, creat_time, 
    update_time, article
    from article
  </select>
    <select id="selectByArticleTitle" resultType="com.by.blog.entity.Article">
    select id, digest, author, title, reading, comments, likes, tags_id, type_id, creat_time,
    update_time, article
    from article
    where title=#{title}
    </select>
    <select id="getArticleList" resultType="com.by.blog.vo.ArticleListVO">
    SELECT  at.id AS blog_id,at.digest,at.author,at.title,at.tags_id,at.type_id,tags.tags_msg,types.type_msg,at.creat_time,COUNT(ct.blog_id) AS commentSum
	 FROM article at
	 LEFT JOIN tags ON tags.id = at.tags_id
     LEFT JOIN comment ct ON at.id= ct.blog_id
	 LEFT JOIN types ON types.id = at.type_id
	GROUP BY at.id
	ORDER BY at.id desc
    </select>
  <select id="selectArticlesByTagId" resultType="com.by.blog.vo.ArticleListVO">
    SELECT  at.id AS blog_id,at.digest,at.author,at.title,at.tags_id,tags.tags_msg,at.type_id,types.type_msg,at.creat_time,COUNT(ct.blog_id) AS commentSum
	 FROM article at
	 LEFT JOIN tags ON tags.id = at.tags_id
     LEFT JOIN comment ct ON at.id= ct.blog_id
	 LEFT JOIN types ON types.id = at.type_id
	 WHERE tags.id=#{tagId}
	GROUP BY at.id
	ORDER BY at.id desc
  </select>
    <select id="selectByArticlesByTypeId" resultType="com.by.blog.vo.ArticleListVO">
    SELECT  at.id AS blog_id,at.digest,at.author,at.title,at.tags_id,tags.tags_msg,at.type_id,types.type_msg,at.creat_time,COUNT(ct.blog_id) AS commentSum
	 FROM article at
	 LEFT JOIN tags ON tags.id = at.tags_id
     LEFT JOIN comment ct ON at.id= ct.blog_id
	 LEFT JOIN types ON types.id = at.type_id
	 WHERE types.id=#{typeId}
	GROUP BY at.id
	ORDER BY at.id desc
    </select>
    <select id="selectByTagsId" resultType="com.by.blog.entity.Article">
      SELECT id, digest, author, title, reading, comments, likes, tags_id, type_id, creat_time,
        update_time, article
        from article
      WHERE tags_id =#{tagsId}
    </select>
    <select id="selectByTypeId" resultType="com.by.blog.entity.Article">
      SELECT id, digest, author, title, reading, comments, likes, tags_id, type_id, creat_time,
        update_time, article
        from article
      WHERE type_id =#{typeId}
    </select>
    <select id="selectByArticleId" resultType="com.by.blog.vo.ArticleVO">
      SELECT  at.id,at.author,at.title,at.reading,at.comments,at.likes,at.creat_time,at.article,at.tags_id,at.type_id,tags.tags_msg as tag ,types.type_msg as type
        FROM  article  at
        LEFT JOIN tags ON at.tags_id= tags.id
        LEFT JOIN types on at.type_id = types.id
        WHERE at.id = #{id}
    </select>
</mapper>